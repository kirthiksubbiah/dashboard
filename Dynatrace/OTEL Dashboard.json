{"version":20,"variables":[],"tiles":{"0":{"title":"Service list with Active Problem flag","type":"data","query":"fetch dt.entity.service\n| filter serviceType != \"DATABASE_SERVICE\"\n| lookup [\n  fetch dt.davis.problems\n  | filter event.status == \"ACTIVE\"\n  | expand affected_entity_ids\n], sourceField:id, lookupField:affected_entity_ids\n| fieldsAdd affected = if(isNotNull(lookup.affected_entity_ids), \"yes\", else: \"no\")\n| fields affected, id, name = entity.name, event_id = lookup.event.id, event_kind = lookup.event.kind\n| sort affected desc, name asc\n","visualization":"table","visualizationSettings":{"autoSelectVisualization":false},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"2":{"title":"Request Performance Overview","type":"data","query":"// Metric microchart simple lookup query\n      timeseries failureCount_timeseries = sum(dt.service.request.failure_count, rate: 1m), by:{dt.entity.service} , bins: 60, filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\", nonempty: true  | fieldsAdd metricName = \"Failed requests\"\n| append[// Metric microchart calculation lookup query\n      timeseries {\n        operand1 = sum(dt.service.request.count, rate: 1m),\n        operand2 = sum(dt.service.request.failure_count, rate: 1m)\n      }, by: { dt.entity.service }, bins: 60, filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\", nonempty: true \n      | fieldsAdd successfulRequests_timeseries = operand1[] - operand2[] \n      | fieldsRemove operand1, operand2 | fieldsAdd metricName = \"Successful requests\"]","visualization":"lineChart","visualizationSettings":{"chartSettings":{"legend":{"position":"bottom"}},"autoSelectVisualization":false,"thresholds":[]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"2025-10-09T20:09:45.852Z","to":"2025-10-10T10:58:10.852Z"},"tileTimeframeEnabled":true}},"4":{"title":"Average CPU Usage (%)","type":"data","query":"timeseries { utilization = avg(system.cpu.utilization, scalar: true), utilization.trend_line = avg(system.cpu.utilization) }","visualization":"singleValue","visualizationSettings":{"singleValue":{"labelMode":"none","recordField":"utilization","colorThresholdTarget":"background","sparklineSettings":{"record":"utilization.trend_line","showTicks":true},"trend":{"isVisible":true}},"autoSelectVisualization":false,"thresholds":[{"id":"0","title":"","field":"utilization","rules":[{"id":"0","label":"","comparator":"≥","color":"#7dc540"},{"id":"1","label":"","comparator":"≥","color":"#f5d30f"},{"id":"2","label":"","comparator":"≥","color":"#dc172a"}],"isEnabled":true}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"5":{"title":"Average JVM Memory Utilization","type":"data","query":"timeseries { used = avg(jvm.memory.used, scalar: true), used.trend_line = avg(jvm.memory.used) }","visualization":"singleValue","visualizationSettings":{"singleValue":{"labelMode":"none","recordField":"used","colorThresholdTarget":"background","sparklineSettings":{"variant":"area","record":"used.trend_line","showTicks":true},"trend":{"isVisible":true}},"autoSelectVisualization":false,"thresholds":[{"id":"0","title":"","field":"used","rules":[{"id":"0","label":"","comparator":"≥","color":"#7dc540"},{"id":"1","label":"","comparator":"≥","color":"#f5d30f"},{"id":"2","label":"","comparator":"≥","color":"#dc172a"}],"isEnabled":true}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"7":{"title":"Service Response Time Percentiles (p50 / p90 / p99)","type":"data","query":"// Microchart: percentile lookup 50\n      timeseries responseTime_p50_timeseries = percentile(dt.service.request.response_time, 50), by: { dt.entity.service }, bins: 60, filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\", nonempty: true  | fieldsAdd metricName = \"Response time p50\"\n| append[// Microchart: percentile lookup 90\n      timeseries responseTime_p90_timeseries = percentile(dt.service.request.response_time, 90), by: { dt.entity.service }, bins: 60, filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\", nonempty: true  | fieldsAdd metricName = \"Response time p90\"]\n| append[// Microchart: percentile lookup 99\n      timeseries responseTime_p99_timeseries = percentile(dt.service.request.response_time, 99), by: { dt.entity.service }, bins: 60, filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\", nonempty: true  | fieldsAdd metricName = \"Response time p99\"]","visualization":"lineChart","visualizationSettings":{"autoSelectVisualization":true},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"8":{"title":"Average Container Memory Utilization","type":"data","query":"timeseries { container_memory_usage_bytes = avg(container_memory_usage_bytes, scalar: true), container_memory_usage_bytes.trend_line = avg(container_memory_usage_bytes) }","visualization":"singleValue","visualizationSettings":{"singleValue":{"labelMode":"none","recordField":"container_memory_usage_bytes","colorThresholdTarget":"background","sparklineSettings":{"variant":"area","record":"container_memory_usage_bytes.trend_line","showTicks":true},"trend":{"isVisible":true}},"autoSelectVisualization":false,"thresholds":[{"id":"0","title":"","field":"container_memory_usage_bytes","rules":[{"id":"0","label":"","comparator":"≥","color":"#7dc540"},{"id":"1","label":"","comparator":"≥","color":"#f5d30f"},{"id":"2","label":"","comparator":"≥","color":"#dc172a"}],"isEnabled":true}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"9":{"title":"Running Containers Overview","type":"data","query":"timeseries { kubelet_running_containers = avg(kubelet_running_containers, scalar: true), kubelet_running_containers.trend_line = avg(kubelet_running_containers) }","visualization":"singleValue","visualizationSettings":{"singleValue":{"labelMode":"none","recordField":"kubelet_running_containers","colorThresholdTarget":"background","sparklineSettings":{"variant":"area","record":"kubelet_running_containers.trend_line","showTicks":true},"trend":{"isVisible":true}},"autoSelectVisualization":false,"thresholds":[{"id":"0","title":"","field":"kubelet_running_containers","rules":[{"id":"0","label":"","comparator":"≥","color":"#7dc540"},{"id":"1","label":"","comparator":"≥","color":"#f5d30f"},{"id":"2","label":"","comparator":"≥","color":"#dc172a"}],"isEnabled":true}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}},"10":{"title":"Cryptowallet Service Error Logs","type":"data","subType":"dql-builder-logs","query":"fetch logs\n| filter matchesValue(status, \"ERROR\")","visualization":"table","visualizationSettings":{"autoSelectVisualization":false,"table":{"columnTypeOverrides":[{"fields":["content"],"id":1760091168027,"value":"log-content"}],"hiddenColumns":[["event.type"],["dt.source_entity"],["loglevel"],["service.version"],["status"],["dt.auth.origin"],["dt.entity.service"],["dt.openpipeline.pipelines"]],"hideColumnsForLargeResults":false,"columnOrder":["[\"span_id\"]","[\"trace_id\"]","[\"timestamp\"]","[\"content\"]","[\"dt.source_entity\"]","[\"event.type\"]","[\"host.name\"]","[\"loglevel\"]","[\"service.instance.id\"]","[\"service.name\"]","[\"service.version\"]","[\"status\"]","[\"dt.auth.origin\"]","[\"dt.entity.service\"]","[\"dt.openpipeline.pipelines\"]","[\"dt.openpipeline.source\"]","[\"env\"]","[\"host.arch\"]","[\"os.description\"]","[\"os.type\"]","[\"otel.scope.name\"]","[\"process.command_args\"]","[\"process.executable.path\"]","[\"process.pid\"]","[\"process.runtime.description\"]","[\"process.runtime.name\"]","[\"process.runtime.version\"]","[\"service\"]","[\"telemetry.distro.name\"]","[\"telemetry.distro.version\"]","[\"telemetry.sdk.language\"]","[\"telemetry.sdk.name\"]","[\"telemetry.sdk.version\"]"]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"queryConfig":{"version":"16.4.0","subQueries":[{"id":"A","isEnabled":true,"datatype":"logs","filter":"status = ERROR"}]},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"timeframe":{"tileTimeframe":{"from":"2025-10-03T10:12:33.966Z","to":"2025-10-10T10:12:33.966Z"},"tileTimeframeEnabled":true},"segments":{"tileSegments":[],"tileSegmentsEnabled":true}},"11":{"title":"Frontend Service Endpoint Performance Overview","type":"data","query":"\ntimeseries endpoints = avg(dt.service.request.response_time), by:{endpoint.name}\n, filter: dt.entity.service==\"SERVICE-E4488B27C75FAA87\" and endpoint.name != \"NON_KEY_REQUESTS\"\n\n// Add configured endpoints\n| append [ data json: \"\"\" [] \"\"\" ]\n\n// Add alerting endpoints\n| append [\n  fetch dt.davis.events.snapshots, from: toTimestamp(\"2025-10-09T18:30:00.000Z\"), to: toTimestamp(\"2025-10-10T12:24:16.042Z\")\n  | filterOut event.provider == \"ROOT_CAUSE_ANALYSIS\"\n  | filter (isNull(event.end) OR event.end >= toTimestamp(\"2025-10-09T18:30:00.000Z\")) AND event.start <= toTimestamp(\"2025-10-10T12:24:16.042Z\")\n  | filter in(affected_entity_types, \"dt.entity.service\")\n       and in(affected_entity_ids, \"SERVICE-E4488B27C75FAA87\")\n       and isNotNull(endpoint.name)\n  | dedup event.id, sort: {timestamp desc}\n  | expand endpoint.name\n]\n\n| dedup endpoint.name\n\n| lookup [\n  fetch dt.entity.service_method, from: -30d@d\n\n  | filter in(id, classicEntitySelector(\"\"\" type(SERVICE_METHOD), fromRelationships.isServiceMethodOfService(entityId(\"SERVICE-E4488B27C75FAA87\")) \"\"\" ))\n], lookupField:entity.name, sourceField:endpoint.name, fields:{serviceMethodId=id}\n| fieldsAdd serviceMethod = if(true, endpoint.name, else:serviceMethodId)\n| fieldsAdd endpointRecord = record(serviceMethodId = serviceMethod, endpointName = endpoint.name)\n| fieldsRemove serviceMethod\n| limit 1000\n| lookup [\n  \nfetch dt.davis.events.snapshots, from: (toTimestamp(\"2025-10-09T18:30:00.000Z\"))@m, to: (toTimestamp(\"2025-10-10T12:24:16.042Z\"))@m +1m\n  | filter isNotNull(endpoint.name)\n  | filter event.category != \"INFO\" AND in(affected_entity_types, \"dt.entity.service\") AND in(affected_entity_ids, \"SERVICE-E4488B27C75FAA87\") AND isNotNull(endpoint.name)\n  | dedup event.id, sort: {timestamp desc}\n  | filterOut event.provider == \"ROOT_CAUSE_ANALYSIS\"\n  | filter (isNull(event.end) OR event.end >= toTimestamp(\"2025-10-09T18:30:00.000Z\")) AND event.start <= toTimestamp(\"2025-10-10T12:24:16.042Z\")\n\n  | fieldsAdd investigationMode = 0\n  | lookup [\n    fetch dt.davis.problems.snapshots, from: (toTimestamp(\"2025-10-09T18:30:00.000Z\"))@m, to: 1m@m\n      | dedup event.id, sort:{timestamp desc}\n      | fieldsAdd investigationMode = false\n      | expand dt.davis.event_ids\n      | sort investigationMode desc, dt.davis.is_duplicate desc\n      | summarize {problems = collectArray(record(problem.id=event.id, problem.kind=event.kind, problem.start=event.start, problem.end=event.end, dt.davis.is_duplicate, investigationMode)), investigationMode = countIf(investigationMode)}, by: {dt.davis.event_ids}\n  ], sourceField: event.id, lookupField: dt.davis.event_ids, fields: {problems, investigationMode}, executionOrder:leftFirst\n  | filter true == false OR event.status == \"ACTIVE\" OR investigationMode > 0\n  | expand affected_entity_ids\n  | expand endpoint.name\n  | fieldsAdd isHealthAlert = if(in(event.type, {\"SERVICE_ERROR_RATE_INCREASED\",\"SERVICE_SLOWDOWN\",\"SERVICE_UNEXPECTED_HIGH_LOAD\",\"SERVICE_UNEXPECTED_LOW_LOAD\"}), True)\n  \n  | dedup {event.id}\n  | summarize {\n    healthIndicators = arrayRemoveNulls(collectArray(if(isHealthAlert==True, record(event.id, problems, investigationMode, event.name, event.description, event.group_label, event.type, event.category, event.provider, event.start, event.end, event.status, timestamp, dt.settings.schema_id, dt.settings.object_id, entity.id=affected_entity_ids, endpoint.name)))),\n    customAlerts = arrayRemoveNulls(collectArray(if(isNull(isHealthAlert), record(event.id, problems, investigationMode, event.name, event.description, event.group_label, event.type, event.category, event.provider, event.start, event.end, event.status, timestamp, dt.settings.schema_id, dt.settings.object_id, entity.id=affected_entity_ids, endpoint.name)))),\n    \n    _activeEventsCount = countIf(event.status == \"ACTIVE\"),\n    _closedEventsCount = countIf(event.status == \"CLOSED\"),\n    investigationMode = sum(investigationMode),\n    investigationThreshold = countIf(event.status == \"ACTIVE\" AND investigationMode > 0)\n  }, by: {endpoint.name}\n  | fieldsAdd eventsThreshold = if(_activeEventsCount > 0, 1, else: if(_closedEventsCount > 0, 0, else: -1))\n], sourceField:endpoint.name, lookupField:endpoint.name, fields:{healthIndicators,customAlerts,eventsThreshold,investigationMode,investigationThreshold}, executionOrder:leftFirst\n| lookup [\n  // Microchart: percentile lookup 50\n      timeseries responseTime_p50_timeseries = percentile(dt.service.request.response_time, 50), by: { endpoint.name }, bins: 40 , filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\"\n], sourceField:endpoint.name, lookupField:endpoint.name, fields:{responseTime_p50_timeseries}, executionOrder:leftFirst\n| lookup [\n  // Value: percentile lookup aggregated value 50\n      timeseries responseTime_p50_aggregated = percentile(dt.service.request.response_time, 50, scalar: true), by: { endpoint.name } , filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\"\n], sourceField:endpoint.name, lookupField:endpoint.name, fields:{responseTime_p50_aggregated}, executionOrder:leftFirst\n| fieldsAdd responseTime_p50_aggregated_rec = record({ timeseries = responseTime_p50_timeseries, value = responseTime_p50_aggregated, isRecentValue = false})\n| fieldsRemove responseTime_p50_timeseries, responseTime_p50_aggregated // remove duplicate fields which are now directly in the responseTime_p50_aggregated_rec record\n| lookup [\n  // Metric microchart simple lookup query\n      timeseries requestCount_timeseries = sum(dt.service.request.count), by:{endpoint.name} , bins: 40 , filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\"\n], sourceField:endpoint.name, lookupField:endpoint.name, fields:{requestCount_timeseries}, executionOrder:leftFirst\n| lookup [\n  // Metric microchart simple lookup aggregated value\n      timeseries requestCount_aggregated = sum(dt.service.request.count, rate: 1m, scalar: true), by:{endpoint.name}  , filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\"\n], sourceField:endpoint.name, lookupField:endpoint.name, fields:{requestCount_aggregated}, executionOrder:leftFirst\n| fieldsAdd requestCount_aggregated_rec = record({ timeseries = requestCount_timeseries, value = requestCount_aggregated, isRecentValue = false})\n| fieldsRemove requestCount_timeseries, requestCount_aggregated // remove duplicate fields which are now directly in the requestCount_aggregated_rec record\n| lookup [\n  // Metric microchart calculation lookup query\n      timeseries {\n        operand1 = sum(dt.service.request.failure_count),\n        operand2 = sum(dt.service.request.count)\n      }, by: { endpoint.name }, bins: 40 , filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\"\n      | fieldsAdd failureRate_timeseries = operand1[] / operand2[]  * 100\n      | fieldsRemove operand1, operand2\n], sourceField:endpoint.name, lookupField:endpoint.name, fields:{failureRate_timeseries}, executionOrder:leftFirst\n| lookup [\n  // Metric microchart calculation lookup aggregated value\n      timeseries {\n        operand1 = sum(dt.service.request.failure_count, scalar: true),\n        operand2 = sum(dt.service.request.count, scalar: true)\n      }, by: { endpoint.name } , filter: dt.entity.service == \"SERVICE-E4488B27C75FAA87\"\n      | fieldsAdd failureRate_aggregated = operand1 / operand2  * 100\n      | fieldsRemove operand1, operand2\n], sourceField:endpoint.name, lookupField:endpoint.name, fields:{failureRate_aggregated}, executionOrder:leftFirst\n| fieldsAdd failureRate_aggregated_rec = record({ timeseries = failureRate_timeseries, value = failureRate_aggregated, isRecentValue = false})\n| fieldsRemove failureRate_timeseries, failureRate_aggregated // remove duplicate fields which are now directly in the failureRate_aggregated_rec record\n| fields endpoint.name, failureRate_aggregated_rec, responseTime_p50_aggregated_rec, requestCount_aggregated_rec, eventsThreshold\n| fieldsAdd failureRate_aggregated_rec = failureRate_aggregated_rec[value]\n| fieldsAdd responseTime_p50_aggregated_rec = responseTime_p50_aggregated_rec[value]\n| fieldsAdd requestCount_aggregated_rec = requestCount_aggregated_rec[value]","visualization":"table","visualizationSettings":{"table":{"enableThresholdInRow":true,"rowDensity":"default","selectedColumnForRowThreshold":"eventsThreshold"},"autoSelectVisualization":false,"thresholds":[{"id":1,"field":"eventsThreshold","isEnabled":true,"title":"","rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-threshold-bad-default, #cd3741)"},"comparator":"=","value":1,"label":""},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-05-default, #84859a)"},"comparator":"=","value":0,"label":""}]}],"unitsOverrides":[{"identifier":"failureRate_aggregated_rec","unitCategory":"percentage","baseUnit":"percent","decimals":0,"suffix":"","delimiter":false,"added":1760099118182},{"identifier":"requestCount_aggregated_rec","unitCategory":"unspecified","baseUnit":"count","decimals":0,"suffix":"/min","delimiter":false,"added":1760099118182}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"davis":{"enabled":false,"davisVisualization":{"isAvailable":true}}}},"layouts":{"0":{"x":0,"y":4,"w":12,"h":6},"2":{"x":12,"y":4,"w":12,"h":6},"4":{"x":0,"y":0,"w":6,"h":4},"5":{"x":18,"y":0,"w":6,"h":4},"7":{"x":0,"y":10,"w":12,"h":6},"8":{"x":12,"y":0,"w":6,"h":4},"9":{"x":6,"y":0,"w":6,"h":4},"10":{"x":0,"y":17,"w":24,"h":4},"11":{"x":12,"y":10,"w":12,"h":7}},"importedWithCode":false,"settings":{}}